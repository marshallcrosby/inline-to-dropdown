{"version":3,"sources":["inline-to-dropdown.js"],"names":["inlineToDropdownEl","document","querySelectorAll","length","forEach","item","reflowItems","classList","add","windowElement","documentElement","windowWidth","window","innerWidth","addEventListener","newWindowWidth","windowWidthDebounce","el","container","querySelector","dropdown","dropdownChildren","appendChild","element","Math","floor","scrollWidth","clientWidth","dropdownChildItem","lastDropdownChildItem","prepend","func","timer","event","clearTimeout","setTimeout","itdDebounce","newWindowWidthDebounce","remove"],"mappings":";;;;;;;CAQC,WACG,MAAMA,EAAqBC,SAASC,iBAAiB,uBAErD,GAAIF,EAAmBG,OAAQ,CAC3BH,EAAmBI,QAAQC,IACvBC,EAAYD,GACZA,EAAKE,UAAUC,IAAI,mCAGvB,MAAMC,EAAgBR,SAASS,gBAC/B,IAAIC,EAAcC,OAAOC,WAEzBD,OAAOE,iBAAiB,SAAU,KAC9B,IAAIC,EAAiBH,OAAOC,WACxBF,IAAgBI,GAChBN,EAAcF,UAAUC,IAAI,sBAEhCG,EAAcI,IAGlB,IAAIC,EAAsBJ,OAAOC,WAYjC,SAASP,EAAYW,GACjB,MAAMC,EAAYD,EAAGE,cAAc,8BAC7BC,EAAWH,EAAGE,cAAc,6BAC5BE,EAAmBD,EAASlB,iBAAiB,6BAEnD,IAAK,MAAMG,KAAQgB,EACfH,EAAUI,YAAYjB,GAG1B,MAAkC,IAOjBkB,EAPEL,EAQZM,KAAKC,MAAMF,EAAQG,aAAeF,KAAKC,MAAMF,EAAQI,eARpB,CACpC,MAAMC,EAAoBV,EAAUhB,iBAAiB,6BAC/C2B,EAAwBD,EAAkBA,EAAkBzB,OAAS,GAC3EiB,EAASU,QAAQD,GAIzB,IAAqBN,EA3BrBX,OAAOE,iBAAiB,SA+BxB,SAAqBiB,GACjB,IAAIC,EACJ,OAAO,SAASC,GACRD,GAAOE,aAAaF,GACxBA,EAAQG,WAAWJ,EAAM,IAAKE,IAnCJG,CAAY,KAC1C,IAAIC,EAAyBzB,OAAOC,WAChCG,IAAwBqB,IACxBrC,EAAmBI,QAAQC,IACvBC,EAAYD,KAEhBI,EAAcF,UAAU+B,OAAO,uBAEnCtB,EAAsBqB,MA7BlC","sourcesContent":["/*!\n    * Inline to dropdown v2.0.0\n    * Automatically add/remove overflown inline items into a dropdown.\n    *\n    * Copyright 2024 Marshall Crosby\n    * https://marshallcrosby.com\n*/\n\n(function() {\n    const inlineToDropdownEl = document.querySelectorAll('.inline-to-dropdown');\n\n    if (inlineToDropdownEl.length) {\n        inlineToDropdownEl.forEach(item => {\n            reflowItems(item);\n            item.classList.add('js-inline-to-dropdown--loaded')\n        });\n\n        const windowElement = document.documentElement;\n        let windowWidth = window.innerWidth;\n        \n        window.addEventListener('resize', () => {\n            let newWindowWidth = window.innerWidth;\n            if (windowWidth !== newWindowWidth) {\n                windowElement.classList.add('js-window-resizing');\n            }\n            windowWidth = newWindowWidth;\n        });\n        \n        let windowWidthDebounce = window.innerWidth;\n        window.addEventListener('resize', itdDebounce(() => {\n            let newWindowWidthDebounce = window.innerWidth;\n            if (windowWidthDebounce !== newWindowWidthDebounce) {\n                inlineToDropdownEl.forEach(item => {\n                    reflowItems(item);\n                });\n                windowElement.classList.remove('js-window-resizing');\n            }\n            windowWidthDebounce = newWindowWidthDebounce;\n        }));\n        \n        function reflowItems(el) {\n            const container = el.querySelector('.inline-to-dropdown__group');\n            const dropdown = el.querySelector('.inline-to-dropdown__menu');\n            const dropdownChildren = dropdown.querySelectorAll('.inline-to-dropdown__item');\n\n            for (const item of dropdownChildren) {\n                container.appendChild(item);\n            }\n            \n            while (isOverflown(container) === true) {\n                const dropdownChildItem = container.querySelectorAll('.inline-to-dropdown__item');\n                const lastDropdownChildItem = dropdownChildItem[dropdownChildItem.length - 1];\n                dropdown.prepend(lastDropdownChildItem);\n            }\n        }\n\n        function isOverflown(element) {\n            return Math.floor(element.scrollWidth) > Math.floor(element.clientWidth);\n        }\n\n        function itdDebounce(func) {\n            let timer;\n            return function(event) {\n                if (timer) clearTimeout(timer);\n                timer = setTimeout(func, 200, event);\n            };\n        }\n    }\n}());"]}